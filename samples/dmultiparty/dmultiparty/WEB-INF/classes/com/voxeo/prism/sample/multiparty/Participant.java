package com.voxeo.prism.sample.multiparty;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URLEncoder;

import javax.media.mscontrol.EventType;
import javax.media.mscontrol.MediaEvent;
import javax.media.mscontrol.MediaEventListener;
import javax.media.mscontrol.MediaSession;
import javax.media.mscontrol.MsControlException;
import javax.media.mscontrol.MsControlFactory;
import javax.media.mscontrol.Parameters;
import javax.media.mscontrol.join.Joinable;
import javax.media.mscontrol.join.Joinable.Direction;
import javax.media.mscontrol.mediagroup.MediaGroup;
import javax.media.mscontrol.mediagroup.signals.SignalDetector;
import javax.media.mscontrol.mediagroup.signals.SignalDetectorEvent;
import javax.media.mscontrol.mixer.MediaMixer;
import javax.media.mscontrol.networkconnection.NetworkConnection;
import javax.media.mscontrol.networkconnection.SdpPortManagerEvent;
import javax.media.mscontrol.resource.RTC;
import javax.servlet.sip.SipServletRequest;
import javax.servlet.sip.SipServletResponse;
import javax.servlet.sip.SipSession;

import org.apache.log4j.Logger;

import com.voxeo.mscontrol.VoxeoParameter;
import com.voxeo.mscontrol.mixer.AdvancedMediaMixer;

@SuppressWarnings("rawtypes")
public class Participant implements MediaEventListener {

  private static final Logger log = Logger.getLogger(Participant.class);

  static String ANNOUCEMENT;
  static {
    try {
      ANNOUCEMENT = URLEncoder
          .encode(
              "application/ssml+xml, <?xml version=\"1.0\"?><speak><voice>Welcome to Voxeo! Please enter your conference ID.</voice></speak>",
              "UTF-8");
    }
    catch (UnsupportedEncodingException e) {
      // ignore
    }
  }

  SipServletRequest _invite;

  SipSession _ss;

  MediaSession _ms;

  NetworkConnection _nc;

  MediaGroup _mg;

  MsControlFactory _factory;

  MixerManager _mgr;

  AdvancedMediaMixer _mixer;

  String _conferenceId;

  protected final static String UNANSWERED_RESPONSE = "UNANSWERED_RESPONSE";

  @SuppressWarnings("unchecked")
  Participant(SipServletRequest invite, MsControlFactory factory) throws MsControlException {
    _factory = factory;
    _ms = _factory.createMediaSession();
    _invite = invite;
    _ss = invite.getSession();
    _ss.setAttribute(Participant.class.getName(), this);
    _ss.setAttribute(MediaSession.class.getName(), _ms);
    _nc = _ms.createNetworkConnection(NetworkConnection.BASIC);
    _nc.getSdpPortManager().addListener(this);
    _mg = _ms.createMediaGroup(MediaGroup.PLAYER_SIGNALDETECTOR);
    _mg.getPlayer().addListener(this);
    _mg.getSignalDetector().addListener(this);
    _mg.join(Joinable.Direction.DUPLEX, _nc);
    _mgr = MixerManager.getInstance(_factory);
  }

  @Override
  public void onEvent(MediaEvent event) {
    try {
      if (event.isSuccessful()) {
        if (event instanceof SdpPortManagerEvent) {
          onSdpEvent((SdpPortManagerEvent) event);
        }
        else if (event instanceof SignalDetectorEvent) {
          onSignalEvent((SignalDetectorEvent) event);
        }
      }
      else {
        hangup();
      }
    }
    catch (Exception e) {
      log.error(e.getMessage(), e);
      hangup();
    }
  }

  void onSdpEvent(SdpPortManagerEvent event) throws IOException, MsControlException {
    EventType type = event.getEventType();
    if (SdpPortManagerEvent.ANSWER_GENERATED.equals(type) || SdpPortManagerEvent.OFFER_GENERATED.equals(type)) {
      // Either an answer (to the initial offer) or an initial offer is
      // generated by the media server
      // Let's send over to the client.
      final SipServletResponse resp = _invite.createResponse(SipServletResponse.SC_OK);
      resp.setContent(event.getMediaServerSdp(), "application/sdp");
      resp.send();
    }
    else if (SdpPortManagerEvent.ANSWER_PROCESSED.equals(type)) {
      if (_ss.getAttribute(UNANSWERED_RESPONSE) == null) {
        ask();
      }
      else {
        ((SipServletResponse) _ss.getAttribute(UNANSWERED_RESPONSE)).createAck().send();
      }
    }
    else if (SdpPortManagerEvent.UNSOLICITED_OFFER_GENERATED.equals(type)) {
      final SipServletRequest reInvite = _ss.createRequest("INVITE");
      reInvite.setContent(event.getMediaServerSdp(), "application/sdp");
      reInvite.send();
    }
  }

  void onSignalEvent(SignalDetectorEvent event) throws MsControlException {
    if (event.getEventType().equals(SignalDetectorEvent.RECEIVE_SIGNALS_COMPLETED)) {
      join(event.getSignalString());
    }
  }

  public void join(String id) throws MsControlException {
    // first unjoin from MediaGroup, in order to catch the
    // UNSOLICITED_OFFER_GENERATED event when the mixer is remote.
    _nc.unjoin(_mg);

    _conferenceId = id;
    final Parameters options = _ms.createParameters();
    options.put(VoxeoParameter.VOXEO_JOIN_ENTER_TONE, true);
    options.put(VoxeoParameter.VOXEO_JOIN_EXIT_TONE, true);
    _mixer = _mgr.createMixer(MediaMixer.AUDIO, options, id);
    _nc.join(Direction.DUPLEX, _mixer);
  }

  public void unjoin() throws MsControlException {
    _ms.release();

    if (_mixer != null) {
      _mgr.removeMixer(_mixer);
    }
  }

  public void negotiateSDP(byte[] sdpOffer) throws MsControlException {
    if (sdpOffer == null) {
      _nc.getSdpPortManager().generateSdpOffer();
    }
    else {
      _nc.getSdpPortManager().processSdpOffer(sdpOffer);
    }
  }

  public void processSDP(byte[] remoteSdp) throws MsControlException {
    if (remoteSdp != null) {
      _nc.getSdpPortManager().processSdpAnswer(remoteSdp);
    }
    else {
      ask();
    }
  }

  public void answerSDP(final SipServletResponse resp) throws IOException, MsControlException {
    final byte[] sdpAnswer = resp.getRawContent();
    if (sdpAnswer != null) {
      _ss.setAttribute(UNANSWERED_RESPONSE, resp);
      _nc.getSdpPortManager().processSdpAnswer(sdpAnswer);
    }
  }

  public void ask() throws MsControlException {
    SignalDetector detector = _mg.getSignalDetector();
    Parameters options = _factory.createParameters();
    options.put(SignalDetector.INTER_SIG_TIMEOUT, 5000);
    options.put(SignalDetector.PROMPT, URI.create("data:" + ANNOUCEMENT));
    detector.receiveSignals(9, SignalDetector.NO_PATTERN, RTC.NO_RTC, options);
  }

  public void hangup() {
    try {
      try {
        unjoin();
      }
      catch (MsControlException e) {
        e.printStackTrace();
      }
      _ss.createRequest("BYE").send();
    }
    catch (IOException e) {
      e.printStackTrace();
    }
  }
}
